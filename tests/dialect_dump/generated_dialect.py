from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *

# ruff: noqa: F403, F405


###
# This dialect is automatically generated by tests/dialect_dump/test_dialect_dump.py
# Please don't edit it manually!
###


@irdl_attr_definition
class Test_SingletonAType(ParametrizedAttribute, TypeAttribute):
    name = "test.singleton_a"


@irdl_attr_definition
class Test_SingletonBType(ParametrizedAttribute, TypeAttribute):
    name = "test.singleton_b"


@irdl_attr_definition
class Test_SingletonCType(ParametrizedAttribute, TypeAttribute):
    name = "test.singleton_c"


@irdl_attr_definition
class Test_TestAttr(ParametrizedAttribute):
    name = "test.test"


@irdl_op_definition
class Test_AndOp(IRDLOperation):
    name = "test.and"

    in_ = operand_def(AllOf(attr_constrs=(AnyAttr(), BaseAttr(Test_SingletonAType))))


@irdl_op_definition
class Test_AnyOp(IRDLOperation):
    name = "test.any"

    in_ = operand_def(AnyAttr())


@irdl_op_definition
class Test_AttributesOp(IRDLOperation):
    name = "test.attributes"
    int_attr = prop_def(
        ParamAttrConstraint(
            IntegerAttr, (AnyAttr(), EqAttrConstraint(attr=IntAttr(16)))
        )
    )
    in_ = prop_def(AnyAttr(), prop_name="in")


@irdl_op_definition
class Test_Integers(IRDLOperation):
    name = "test.integers"

    any_int = operand_def(
        ParamAttrConstraint(
            IntegerType, (EqAttrConstraint(attr=IntAttr(data=8)), AnyAttr())
        )
    )
    any_integer = operand_def(BaseAttr(IntegerType))


@irdl_op_definition
class Test_OrOp(IRDLOperation):
    name = "test.or"

    in_ = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Test_SingletonAType),
                BaseAttr(Test_SingletonBType),
                BaseAttr(Test_SingletonCType),
            )
        )
    )


@irdl_op_definition
class Test_SingleOp(IRDLOperation):
    name = "test.single"

    arg = operand_def(BaseAttr(TensorType))
    res = result_def(BaseAttr(TensorType))
    assembly_format = "$arg attr-dict : type($arg) -> type($res)"


TestDialect = Dialect(
    "test",
    [
        Test_AndOp,
        Test_AnyOp,
        Test_AttributesOp,
        Test_Integers,
        Test_OrOp,
        Test_SingleOp,
    ],
    [Test_TestAttr, Test_SingletonAType, Test_SingletonBType, Test_SingletonCType],
)
